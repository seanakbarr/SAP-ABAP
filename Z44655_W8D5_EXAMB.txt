*&---------------------------------------------------------------------*
*& Report Z44655_W8D5_EXAMB
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT Z44655_W8D5_EXAMB.

TABLES : EKKO, EKPO.

PARAMETERS : P_EBELN TYPE EKKO-EBELN.

DATA GS_HEADER TYPE ZSPO_HEADER1_44655.

DATA: GT_ITEM  TYPE STANDARD TABLE OF ZSPO_ITEM1_44655,
      GS_ITEM  TYPE ZSPO_ITEM1_44655,
*      GT_EKPO  TYPE STANDARD TABLE OF EKPO,
      GT_DEL   LIKE GT_ITEM,
      GO_POALV TYPE REF TO ZHDCL_HALV_PARENT.

DATA: GS_HEADERPO  TYPE BAPIMEPOHEADER,
      GS_HEADERPOX TYPE BAPIMEPOHEADERX,

      GT_ITEMPO    TYPE STANDARD TABLE OF BAPIMEPOITEM,
      GS_ITEMPO    TYPE BAPIMEPOITEM,

      GT_ITEMPOX   TYPE STANDARD TABLE OF BAPIMEPOITEMX,
      GS_ITEMPOX   TYPE BAPIMEPOITEMX,

      GT_RETURN    TYPE STANDARD TABLE OF BAPIRET2,
      GS_RETURN    TYPE BAPIRET2,

      LV_MSG       TYPE STRING.

DATA: GS_PO_NUMBER TYPE BAPIMEPOHEADER.

*&SPWIZARD: DECLARATION OF TABLECONTROL 'TC_9000_01' ITSELF
CONTROLS: TC_9000_01 TYPE TABLEVIEW USING SCREEN 9000.

DATA:     OK_CODE LIKE SY-UCOMM.

CLASS LCL_PROG DEFINITION
  INHERITING FROM /ZHD/CL_HREPORT
  CREATE PRIVATE.

  PUBLIC SECTION.

    CLASS-METHODS PUSH_VIEW.
    METHODS INITIALIZE REDEFINITION.
    METHODS SHOW REDEFINITION.
    METHODS EXECUTE REDEFINITION.

    CLASS-DATA GO_LOG TYPE REF TO /ZHD/CL_HSCREEN_LOG.

ENDCLASS.

CLASS LCL_V9000 DEFINITION CREATE PUBLIC
  INHERITING FROM /ZHD/CL_HSCREEN_WITH_COMPONENT FINAL.

  PUBLIC SECTION.

    METHODS CONSTRUCTOR.

    METHODS PBO REDEFINITION.
    METHODS PAI REDEFINITION.
    METHODS EXIT REDEFINITION.

  PROTECTED SECTION.

    METHODS GET_DATA_HEADER.
    METHODS ADD_COMPONENTS REDEFINITION.

  PRIVATE SECTION.
    METHODS LOCK_ORDER.

    DATA GO_LOCK TYPE REF TO /ZHD/IF_HSCREEN_LOCK.
    DATA GV_CONDITION TYPE STRING VALUE 'REPID = SY-CPROG AND SBY01 ='''.

ENDCLASS.

CLASS LCL_V9001 DEFINITION CREATE PUBLIC
  INHERITING FROM /ZHD/CL_HSCREEN FINAL.

  PUBLIC SECTION.
    METHODS CONSTRUCTOR.

    METHODS PBO REDEFINITION.
    METHODS EXIT REDEFINITION.

ENDCLASS.

CLASS LCL_TC_ITEM DEFINITION CREATE PUBLIC
  INHERITING FROM /ZHD/CL_HSCREEN_TABLE_CONTROL FINAL.

  PUBLIC SECTION.

    METHODS CONSTRUCTOR
      IMPORTING
        HSCREEN TYPE REF TO /ZHD/CL_HSCREEN
      RAISING
        CX_UUID_ERROR
        /ZHD/CX_HSCREEN.

    METHODS PBO_TC_LINE              REDEFINITION.
    METHODS PAI_TC_LINE              REDEFINITION.
    METHODS IS_LINE_INSERT           REDEFINITION.
    METHODS IS_DELETION_CONFIRMED    REDEFINITION.
    METHODS POH                      REDEFINITION.

ENDCLASS.

CLASS LCL_PROG IMPLEMENTATION.

  METHOD PUSH_VIEW.

    CHECK NOT IS_SCREEN_EXISTS( PROGRAM = SY-REPID ).

    DATA LO_VIEW TYPE REF TO /ZHD/IF_HSCREEN.
    DATA LV_CLSNAM TYPE SEOCLSNAME.
    CASE SY-DYNNR.
      WHEN '1000'.
        LV_CLSNAM = 'LCL_PROG'.
      WHEN OTHERS.
        LV_CLSNAM = 'LCL_V' && SY-DYNNR.
    ENDCASE.

    CREATE OBJECT LO_VIEW TYPE (LV_CLSNAM).
  ENDMETHOD.

  METHOD INITIALIZE.

    GO_LOG = CAST /ZHD/CL_HSCREEN_LOG( LOG ).
    GO_LOG->SUCCESS( 'INITIALIZE SUCCESS' ).

  ENDMETHOD.

  METHOD SHOW.

    GO_LOG->/ZHD/IF_HSCREEN_LOG~SHOW_LOG( ).
    GO_LOG->COMMIT( ).

  ENDMETHOD.

  METHOD EXECUTE.

    CALL SCREEN 9000.

  ENDMETHOD.

ENDCLASS.

CLASS LCL_V9000 IMPLEMENTATION.

  METHOD CONSTRUCTOR.

    SUPER->CONSTRUCTOR( ).

    IF P_EBELN IS NOT INITIAL.

      GET_DATA_HEADER( ).

    ENDIF.

    IF GS_HEADER-EBELN IS NOT INITIAL.
*      LOCK_ORDER( ).
    ENDIF.

    ADD_COMPONENTS( ).

  ENDMETHOD.

  METHOD GET_DATA_HEADER.

    SELECT SINGLE *
      FROM EKKO
      INTO CORRESPONDING FIELDS OF GS_HEADER
     WHERE EBELN = P_EBELN.

    IF SY-SUBRC <> 0.
      MESSAGE TEXT-E01 TYPE 'S' DISPLAY LIKE 'E'.
    ENDIF.

  ENDMETHOD.

  METHOD PBO.

    SET PF-STATUS SY-DYNNR.
    SET TITLEBAR SY-DYNNR WITH TEXT-T01.

  ENDMETHOD.

  METHOD PAI.

    CASE UCOMM.
      WHEN TEXT-001.

        IF GET_DISPLAY_MODE( ) = /ZHD/CL_HSCREEN=>DISPLAY_MODE_MODIFY.
          SET_DISPLAY_MODE( /ZHD/CL_HSCREEN=>DISPLAY_MODE_SHOW ).
        ELSE.
          SET_DISPLAY_MODE( /ZHD/CL_HSCREEN=>DISPLAY_MODE_MODIFY ).
        ENDIF.

      WHEN TEXT-002.

        IF CURSOR_FILED = 'GS_HEADER-EBELN' AND GS_HEADER-EBELN IS NOT INITIAL.

          CALL SCREEN 9001.

        ENDIF.

      WHEN TEXT-003.

        CLEAR GS_HEADERPO.
        GS_HEADERPO-COMP_CODE   = GS_HEADER-BUKRS.
        GS_HEADERPO-DOC_TYPE    = 'NB'.
        GS_HEADERPO-VENDOR      = GS_HEADER-LIFNR.
        GS_HEADERPO-PURCH_ORG   = GS_HEADER-EKORG.
        GS_HEADERPO-PUR_GROUP   = GS_HEADER-EKGRP.

        CLEAR GS_HEADERPOX.
        GS_HEADERPOX-COMP_CODE = 'X'.
        GS_HEADERPOX-DOC_TYPE = 'X'.
        GS_HEADERPOX-VENDOR = 'X'.
        GS_HEADERPOX-PURCH_ORG = 'X'.
        GS_HEADERPOX-PUR_GROUP = 'X'.

        DELETE GT_ITEM WHERE MATNR IS INITIAL.

        LOOP AT GT_ITEM INTO GS_ITEM.

          CLEAR GS_ITEMPO.
          GS_ITEMPO-PO_ITEM      = GS_ITEM-EBELP.
          GS_ITEMPO-MATERIAL     = GS_ITEM-MATNR.
          GS_ITEMPO-QUANTITY     = GS_ITEM-MENGE.
          GS_ITEMPO-PO_UNIT      = GS_ITEM-MEINS.
          GS_ITEMPO-PLANT        = GS_ITEM-WERKS.
          GS_ITEMPO-DELETE_IND   = ' '.
          APPEND GS_ITEMPO TO GT_ITEMPO.

          CLEAR GS_ITEMPOX.
          GS_ITEMPOX-PO_ITEM  = GS_ITEM-EBELP.
          GS_ITEMPOX-PO_ITEMX = 'X'.
          GS_ITEMPOX-MATERIAL = 'X'.
          GS_ITEMPOX-QUANTITY = 'X'.
          GS_ITEMPOX-PO_UNIT = 'X'..
          GS_ITEMPOX-PLANT    = 'X'.
          GS_ITEMPOX-DELETE_IND   = 'X'.
          APPEND GS_ITEMPOX TO GT_ITEMPOX.

        ENDLOOP.

        CLEAR GT_RETURN.
        IF GS_HEADER-EBELN IS INITIAL.

          CALL FUNCTION 'BAPI_PO_CREATE1'
            EXPORTING
              POHEADER         = GS_HEADERPO
              POHEADERX        = GS_HEADERPOX
            IMPORTING
              EXPPURCHASEORDER = GS_HEADER-EBELN
            TABLES
              RETURN           = GT_RETURN
              POITEM           = GT_ITEMPO
              POITEMX          = GT_ITEMPOX.

        ELSE.

          LOOP AT GT_DEL INTO GS_ITEM.

            CLEAR GS_ITEMPO.
            GS_ITEMPO-PO_ITEM      = 10 * ( SY-TABIX + LINES( GT_ITEM ) ).
            GS_ITEMPO-MATERIAL     = GS_ITEM-MATNR.
            GS_ITEMPO-QUANTITY     = GS_ITEM-MENGE.
            GS_ITEMPO-PO_UNIT    = GS_ITEM-MEINS.
*            GS_ITEMPO-NET_PRICE    = GS_ITEM-NETPR.
            GS_ITEMPO-PLANT        = GS_ITEM-WERKS.
            GS_ITEMPO-DELETE_IND   = ' '.
            APPEND GS_ITEMPO TO GT_ITEMPO.

            CLEAR GS_ITEMPOX.
            GS_ITEMPOX-PO_ITEM  = GS_ITEMPO-PO_ITEM.
            GS_ITEMPOX-PO_ITEMX = 'X'.
            GS_ITEMPOX-MATERIAL = 'X'.
            GS_ITEMPOX-QUANTITY = 'X'.
            GS_ITEMPOX-PO_UNIT = 'X'.
*            GS_ITEMPOX-NET_PRICE = 'X'.
            GS_ITEMPOX-PLANT    = 'X'.
            GS_ITEMPOX-DELETE_IND   = 'X'.
            APPEND GS_ITEMPOX TO GT_ITEMPOX.

            CLEAR: GS_ITEMPO, GS_ITEM.

          ENDLOOP.

          CALL FUNCTION 'BAPI_PO_CHANGE'
            EXPORTING
              PURCHASEORDER = GS_HEADER-EBELN
              POHEADER      = GS_HEADERPO
              POHEADERX     = GS_HEADERPOX
            TABLES
              RETURN        = GT_RETURN
              POITEM        = GT_ITEMPO
              POITEMX       = GT_ITEMPOX.

        ENDIF.

        CLEAR: GS_HEADERPO,GS_HEADERPOX.
        CLEAR: GT_ITEMPO,GT_ITEMPOX.

        IF NOT LINE_EXISTS( GT_RETURN[ TYPE = 'E' ] )
           AND NOT LINE_EXISTS( GT_RETURN[ TYPE = 'A' ] )
           AND NOT LINE_EXISTS( GT_RETURN[ TYPE = 'X' ] ).

          CLEAR GS_RETURN.
          CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
            IMPORTING
              RETURN = GS_RETURN.
          MESSAGE 'Successfully Committed : ' && GS_HEADER-EBELN TYPE 'S'.

          GS_ITEM-EBELN = GS_HEADER-EBELN.
          MODIFY GT_ITEM FROM GS_ITEM TRANSPORTING EBELN WHERE EBELN IS INITIAL.

          SET_DISPLAY_MODE( /ZHD/CL_HSCREEN=>DISPLAY_MODE_SHOW ).

          READ TABLE GT_RETURN INDEX 1 INTO DATA(LS_SUCCESS).
          MESSAGE LS_SUCCESS-MESSAGE TYPE 'S'.
          LCL_PROG=>GO_LOG->SUCCESS('' && LS_SUCCESS-MESSAGE ).

        ELSE.

          CLEAR GS_RETURN.
          CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'
            IMPORTING
              RETURN = GS_RETURN.
          MESSAGE 'Failed to Committed, Rollback the Data' TYPE 'E'.

          READ TABLE GT_RETURN INDEX 1 INTO DATA(LS_FAIL).
          MESSAGE LS_FAIL-MESSAGE TYPE 'S' DISPLAY LIKE 'E'.
          LCL_PROG=>GO_LOG->ERROR('' && LS_FAIL-MESSAGE ).

          SET_DISPLAY_MODE( /ZHD/CL_HSCREEN=>DISPLAY_MODE_MODIFY ).

        ENDIF.

      WHEN OTHERS.
    ENDCASE.

    CLEAR SY-UCOMM.

    IF GO_LOCK IS NOT INITIAL.
      GO_LOCK->UPDATE_LOCK( ).
    ENDIF.

  ENDMETHOD.

  METHOD EXIT.

    CASE SY-UCOMM.
      WHEN '&ZBACK' OR '&ZEXIT'.
        LEAVE TO SCREEN 0.
      WHEN '&ZEND'.
        LEAVE PROGRAM.
      WHEN OTHERS.
    ENDCASE.

    IF GO_LOCK IS NOT INITIAL.
      GO_LOCK->UNLOCK( ).
    ENDIF.

    SUPER->EXIT( ).

  ENDMETHOD.

  METHOD ADD_COMPONENTS.

    NEW LCL_TC_ITEM( ME ).

  ENDMETHOD.

  METHOD LOCK_ORDER.

    CHECK P_EBELN IS NOT INITIAL.

    DATA LO_LOCK TYPE REF TO /ZHD/CL_HSCREEN_LOCK.

    CREATE OBJECT LO_LOCK
      EXPORTING
        GUID = LCL_PROG=>GUID.

    GO_LOCK = LO_LOCK.
    LO_LOCK->SET_CONDITION( GV_CONDITION && P_EBELN && '''' ).

    DATA LS_LOCK_INFO TYPE /ZHD/THSCRN_LOCK.

    IF LO_LOCK->HAS_LOCK( IMPORTING LOCK_INFO = LS_LOCK_INFO ).

      MESSAGE S010(/ZHD/HSCREEN) WITH P_EBELN LS_LOCK_INFO-ERNAM LS_LOCK_INFO-ERDAT && LS_LOCK_INFO-ERTIM '3' DISPLAY LIKE 'E'.
      LEAVE TO SCREEN 0.

    ENDIF.

    LO_LOCK->AUTO_RELEASE( '3' )->LOCK( VALUE #( SBY01 = P_EBELN ) ).

  ENDMETHOD.

ENDCLASS.

CLASS LCL_V9001 IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    SUPER->CONSTRUCTOR( ).

    SELECT *
      FROM EKPO
      INTO TABLE @DATA(LT_EKPO)
     WHERE EBELN = @GS_HEADER-EBELN
       AND LOEKZ = ' '.

    IF SY-SUBRC = 0.

      DATA LO_CONTAINER TYPE REF TO CL_GUI_CUSTOM_CONTAINER.

      CREATE OBJECT LO_CONTAINER
        EXPORTING
          CONTAINER_NAME = 'PO_ITEM'.

      ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE             = 'HALV_CUST'
                                           BIND_ITAB          = ABAP_TRUE
                                           DYNNR              = '9001'
                                           CONTAINER_POSITION = 1
                                           CONTAINER          = LO_CONTAINER )
                                 )->BIND( CHANGING ITAB = LT_EKPO )->DISPLAY( ).

    ELSE.

      MESSAGE TEXT-E02 TYPE 'S' DISPLAY LIKE 'E'.

    ENDIF.

  ENDMETHOD.

  METHOD PBO.

    SET PF-STATUS '9000'.
    SET TITLEBAR ' 9000' WITH TEXT-T02.

  ENDMETHOD.

  METHOD EXIT.

    CASE SY-UCOMM.
      WHEN '&ZBACK' OR '&ZEXIT'.
        LEAVE TO SCREEN 0.
      WHEN '&ZEND'.
        LEAVE PROGRAM.
      WHEN OTHERS.
    ENDCASE.

    SUPER->EXIT( ).

  ENDMETHOD.
ENDCLASS.

CLASS LCL_TC_ITEM IMPLEMENTATION.

  METHOD CONSTRUCTOR.

    SUPER->CONSTRUCTOR( PARENT             =  HSCREEN
                        TC_NAME            = 'TC_9000_01'
                        DATA_SOURCE        = 'GT_ITEM'
                        DATA_WA            = 'GS_ITEM'
                        REF_STRUCTURE_NAME = 'ZSPO_ITEM1_44655'
                        SELBAR_NAME        = 'ZBOX' ).

    IF P_EBELN IS NOT INITIAL.

      SELECT *
        FROM EKPO
        INTO CORRESPONDING FIELDS OF TABLE GT_ITEM
       WHERE EBELN = P_EBELN
         AND LOEKZ = ' '.

      IF SY-SUBRC <> 0.

        MESSAGE TEXT-E02 TYPE 'S' DISPLAY LIKE 'E'.

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD PBO_TC_LINE.

    IF GS_ITEM-MATNR IS NOT INITIAL.

      SELECT SINGLE MAKTX
       FROM MAKT
       INTO GS_ITEM-MAKTX
      WHERE SPRAS = SY-LANGU
        AND MATNR = GS_ITEM-MATNR.

      SELECT SINGLE NETPR
        FROM EKPO
        INTO GS_ITEM-NETPR
      WHERE MATNR = GS_ITEM-MATNR.

      SELECT SINGLE MEINS
        FROM EKPO
        INTO GS_ITEM-MEINS
      WHERE MATNR = GS_ITEM-MATNR.

      IF SY-SUBRC <> 0.

        MESSAGE TEXT-E03 TYPE 'S' DISPLAY LIKE 'E'.

      ENDIF.

    ENDIF.

    SUPER->PBO_TC_LINE( ).

  ENDMETHOD.

  METHOD PAI_TC_LINE.

    SUPER->PAI_TC_LINE( ).

  ENDMETHOD.

  METHOD IS_LINE_INSERT.

    IS_LINE_INSERT = SUPER->IS_LINE_INSERT( ).

    DATA(LV_INDEX) = LINES( GT_ITEM ).

    GT_ITEM[ LV_INDEX ]-EBELN = EKKO-EBELN.

    IF GT_ITEM[ LV_INDEX ]-EBELP IS INITIAL.
      IF LV_INDEX = 1.
        GT_ITEM[ LV_INDEX ]-EBELP = 10.
      ELSE.
        GT_ITEM[ LV_INDEX ]-EBELP = GT_ITEM[ LV_INDEX - 1 ]-EBELP + 10.
      ENDIF.
    ENDIF.

  ENDMETHOD.

  METHOD IS_DELETION_CONFIRMED.

    DATA ANSWER TYPE C.
    CALL FUNCTION 'POPUP_TO_CONFIRM'
      EXPORTING
        TEXT_QUESTION  = 'Are you sure you want to delete :' && GT_ITEM[ INDEX ]-EBELP && '?'
      IMPORTING
        ANSWER         = ANSWER
      EXCEPTIONS
        TEXT_NOT_FOUND = 1
        OTHERS         = 2.
    IF SY-SUBRC = 0 AND ANSWER = '1'.
      IS_CONFIRMED = ABAP_TRUE.
      READ TABLE GT_ITEM INTO DATA(LS_EKPO) INDEX INDEX.
      APPEND LS_EKPO TO GT_DEL.
    ENDIF.

  ENDMETHOD.

  METHOD POH.

    CASE PARENT->CURSOR_FILED.
      WHEN 'GS_HEADER-EBELN'.
        IF GS_HEADER-EBELN IS NOT INITIAL.
          SET PARAMETER ID 'BES' FIELD GS_HEADER-EBELN.
          CALL TRANSACTION 'ME23N'.
        ELSE.
          MESSAGE TEXT-E04 TYPE 'S' DISPLAY LIKE 'E'.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.

  ENDMETHOD.

ENDCLASS.

INCLUDE /ZHD/HSCREEN_EVENT_INC.

*&SPWizard: Data incl. inserted by SP Wizard. DO NOT CHANGE THIS LINE!
*INCLUDE Z44655_W8D5_EXAMB_TC .
