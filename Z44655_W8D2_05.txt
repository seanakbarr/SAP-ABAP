*&---------------------------------------------------------------------*
*& Report Z44655_W8D2_05
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT Z44655_W8D2_05.

CLASS LCL_PROG DEFINITION
  CREATE PRIVATE.

  PUBLIC SECTION.
    TYPES: BEGIN OF TS_SCARR.
    TYPES:   ZBOX  TYPE XFELD,
             COLOR TYPE LVC_T_SCOL,
             STYLE TYPE LVC_T_STYL.
             INCLUDE TYPE SCARR.
    TYPES: END OF TS_SCARR.

    TYPES TT_SCARR TYPE STANDARD TABLE OF TS_SCARR WITH DEFAULT KEY.

    TYPES: BEGIN OF TS_SFLIGHT.
    TYPES:   ZBOX  TYPE XFELD,
             COLOR TYPE LVC_T_SCOL,
             STYLE TYPE LVC_T_STYL.
             INCLUDE TYPE SFLIGHT.
    TYPES: END OF TS_SFLIGHT.

    TYPES TT_SFLIGHT TYPE STANDARD TABLE OF TS_SFLIGHT WITH DEFAULT KEY.

    CLASS-DATA GO_SFLIGHT TYPE REF TO ZHDCL_HALV_PARENT.
*    CLASS-DATA GT_MASTER TYPE TT_SCARR.
    CLASS-DATA GT_SFLIGHT TYPE TT_SFLIGHT.

    CLASS-DATA: GT_SCARR TYPE TT_SCARR,
                GS_SCARR TYPE TS_SCARR.

    CLASS-DATA GO_SCARR TYPE REF TO ZHDCL_HALV_PARENT.

    CLASS-METHODS GET_INSTANCE
      RETURNING
        VALUE(RO_INSTANCE) TYPE REF TO LCL_PROG.

    METHODS SET_COLOR.

    METHODS MAIN.

    DATA GV_CARRID TYPE S_CARRID.

  PRIVATE SECTION.
    METHODS CONSTRUCTOR.
    CLASS-DATA GO_INSTANCE TYPE REF TO LCL_PROG.

*    DATA: GT_SCARR TYPE TT_SCARR,
*          GS_SCARR TYPE TS_SCARR.
*
*    DATA GO_SCARR TYPE REF TO ZHDCL_HALV_PARENT.

ENDCLASS.

CLASS LCL_HALV_EVENT_SCARR DEFINITION
  INHERITING FROM ZHDCL_HALV_EVENT_HANDLER.

  PUBLIC SECTION.
    METHODS ON_PBO                REDEFINITION.
    METHODS ON_TOOLBAR            REDEFINITION.
    METHODS ON_USER_COMMAND       REDEFINITION.
    METHODS ON_CHANGED_FINISHED   REDEFINITION.
    METHODS ON_HOTSPOT_CLICK      REDEFINITION.
    METHODS ON_DOUBLE_CLICK       REDEFINITION.

ENDCLASS.

CLASS LCL_HALV_EVENT_SFLIGHT DEFINITION
  INHERITING FROM ZHDCL_HALV_EVENT_HANDLER.

  PUBLIC SECTION.
    METHODS ON_RETRIEVE           REDEFINITION.
    METHODS ON_CHANGED_FINISHED   REDEFINITION.

ENDCLASS.

START-OF-SELECTION.
  LCL_PROG=>GET_INSTANCE( )->MAIN( ).

CLASS LCL_PROG IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    SELECT *
      FROM SCARR
     INTO CORRESPONDING FIELDS OF TABLE GT_SCARR.

    SELECT *
      FROM SFLIGHT
     INTO CORRESPONDING FIELDS OF TABLE GT_SFLIGHT.

    DATA(SPLITTER) = NEW CL_GUI_SPLITTER_CONTAINER( COLUMNS = 2
                                                    ROWS    = 1
                                                    PARENT  = NEW CL_GUI_CUSTOM_CONTAINER( CONTAINER_NAME = 'CON' ) ).

    IF SY-SUBRC = 0.
      GO_SCARR = ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV_CUST'
                                                        BIND_ITAB = ABAP_TRUE
                                                        TITLE = TEXT-F07
                                                        COLOR_TABLE_NAME = 'COLOR'
                                                        STYLE_TABLE_NAME = 'STYLE'
                                                        EVENT_HANDLER = NEW LCL_HALV_EVENT_SCARR( )
                                                        CHECKBOX_NAME    = 'ZBOX'
                                                        DYNNR = '9000'
                                                        CONTAINER_POSITION = '01'
                                                        CONTAINER          = SPLITTER->GET_CONTAINER( COLUMN = 1 ROW = 1  ) ) ).
      GO_SCARR->BIND( CHANGING ITAB = GT_SCARR ).

      GO_SFLIGHT = ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV_CUST'
                                                        BIND_ITAB = ABAP_TRUE
                                                        TITLE = TEXT-F07
                                                        COLOR_TABLE_NAME = 'COLOR'
                                                        STYLE_TABLE_NAME = 'STYLE'
                                                        EVENT_HANDLER = NEW LCL_HALV_EVENT_SFLIGHT( )
                                                        CHECKBOX_NAME    = 'ZBOX'
                                                        DYNNR = '9000'
                                                        CONTAINER_POSITION = '02'
                                                        CONTAINER          = SPLITTER->GET_CONTAINER( COLUMN = 2 ROW = 1  ) ) ).

      GO_SFLIGHT->BIND( CHANGING ITAB = GT_SFLIGHT ).

      SET_COLOR( ).
      CALL SCREEN 9000.

    ELSE.

      MESSAGE TEXT-E01 TYPE 'E'.

    ENDIF.
  ENDMETHOD.

  METHOD GET_INSTANCE.
    IF GO_INSTANCE IS NOT BOUND.
      CREATE OBJECT GO_INSTANCE.
    ENDIF.
    RO_INSTANCE = GO_INSTANCE.
  ENDMETHOD.

  METHOD SET_COLOR.

    DATA LS_CELL_COLOR TYPE LVC_S_SCOL.

    FIELD-SYMBOLS <TABLE> TYPE TT_SCARR.
    ASSIGN GT_SCARR TO <TABLE>.

*    Clear it before setting the style color to prevent incorrect application if it is set elsewhere.
    GO_SCARR->CLEAR_LINE_COLOR_TABLE( ).

    LOOP AT <TABLE> ASSIGNING FIELD-SYMBOL(<POINTER>).

      DATA(INDEX) = SY-TABIX.
      CASE <POINTER>-CURRCODE.
        WHEN 'USD'.
          CLEAR: LS_CELL_COLOR.
          LS_CELL_COLOR-FNAME = 'CURRCODE'.
          LS_CELL_COLOR-COLOR-COL     = '6'.

          APPEND LS_CELL_COLOR TO GS_SCARR-COLOR.
          MODIFY <TABLE> FROM GS_SCARR TRANSPORTING COLOR.
          CLEAR: GS_SCARR-COLOR.

        WHEN 'EUR'.
          CLEAR: LS_CELL_COLOR.
          LS_CELL_COLOR-FNAME = 'CURRCODE'.
          LS_CELL_COLOR-COLOR-COL     = '5'.

          APPEND LS_CELL_COLOR TO GS_SCARR-COLOR.
          MODIFY <TABLE> FROM GS_SCARR TRANSPORTING COLOR.
          CLEAR: GS_SCARR-COLOR.
        WHEN OTHERS.
          CLEAR: LS_CELL_COLOR.
          LS_CELL_COLOR-FNAME = 'CURRCODE'.
          LS_CELL_COLOR-COLOR-COL     = '3'.

          APPEND LS_CELL_COLOR TO GS_SCARR-COLOR.
          MODIFY <TABLE> FROM GS_SCARR TRANSPORTING COLOR.
          CLEAR: GS_SCARR-COLOR.
      ENDCASE.

    ENDLOOP.

  ENDMETHOD.

  METHOD MAIN.

    " First Way "
*    GO_SCARR = ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV' BIND_ITAB = ABAP_TRUE ) ).
    GO_SCARR->DISPLAY( ).

    " Second Way "
*    ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV' BIND_ITAB = ABAP_TRUE )
*                     )->BIND( CHANGING ITAB = GT_SCARR
*                     )->DISPLAY( ).

  ENDMETHOD.

ENDCLASS.

CLASS LCL_HALV_EVENT_SCARR IMPLEMENTATION.

  METHOD ON_PBO.

    DATA(FIELDCAT) = HALV->GET_FIELDCAT( ).

    FIELDCAT[ FIELDNAME = 'CARRID' ]-HOTSPOT = ABAP_TRUE.
    FIELDCAT[ FIELDNAME = 'URL' ]-EDIT = ABAP_TRUE.
    HALV->SET_FIELDCAT( FIELDCAT )."

    DATA(LAYOUT) = HALV->GET_LAYOUT( ).

*  LAYOUT-EDIT       = ABAP_TRUE.
    LAYOUT-CWIDTH_OPT = ABAP_TRUE.

    HALV->SET_LAYOUT( LAYOUT ).

    HALV->REFRESH( ).

  ENDMETHOD.

  METHOD ON_TOOLBAR.

    HALV->ADD_BUTTON(  FUN_CODE  = TEXT-F03
                       BTN_TYPE  = 0
                       ICON      = ICON_SELECT_ALL
                       TEXT      = ''
                       QUICKINFO = TEXT-F01
                       DISABLE   = ABAP_FALSE
                       OBJECT    = E_OBJECT

       )->ADD_BUTTON(  FUN_CODE  = TEXT-F04
                       BTN_TYPE  = 0
                       ICON      = ICON_DESELECT_ALL
                       TEXT      = ''
                       QUICKINFO = TEXT-F02
                       DISABLE   = ABAP_FALSE
                       OBJECT    = E_OBJECT
       ).

  ENDMETHOD.

  METHOD ON_USER_COMMAND.

    FIELD-SYMBOLS <LT_TAB> TYPE LCL_PROG=>TT_SCARR.
    ASSIGN HALV->GRID->OUTTAB->* TO <LT_TAB>.

    DATA LS_SCARR TYPE LCL_PROG=>TS_SCARR.
    CASE E_UCOMM.
      WHEN TEXT-F03.
        LS_SCARR-ZBOX = ABAP_TRUE.
        MODIFY <LT_TAB> FROM LS_SCARR TRANSPORTING ZBOX WHERE ZBOX = ABAP_FALSE.
      WHEN TEXT-F04.
        LS_SCARR-ZBOX = ABAP_FALSE.
        MODIFY <LT_TAB> FROM LS_SCARR TRANSPORTING ZBOX WHERE ZBOX = ABAP_TRUE.
      WHEN OTHERS.
    ENDCASE.

    HALV->REFRESH( ).

  ENDMETHOD.

  METHOD ON_CHANGED_FINISHED.

    CHECK ET_GOOD_CELLS IS NOT INITIAL.

    FIELD-SYMBOLS <LT_TAB> TYPE LCL_PROG=>TT_SCARR.
    ASSIGN HALV->GRID->OUTTAB->* TO <LT_TAB>.

    IF <LT_TAB> IS ASSIGNED.

*      REFRESH LCL_PROG=>GT_MASTER.
*      MOVE-CORRESPONDING <LT_TAB> TO LCL_PROG=>GT_MASTER.
*      LCL_PROG=>GO_SFLIGHT->ON_RETRIEVE( ).

      FIELD-SYMBOLS <LS_LINE> TYPE LCL_PROG=>TS_SCARR.
      READ TABLE <LT_TAB> ASSIGNING <LS_LINE> INDEX ET_GOOD_CELLS[ 1 ]-ROW_ID.

      IF SY-SUBRC = 0.

        HALV->CLEAR_LINE_COLOR_TABLE( ).
        HALV->CLEAR_LINE_STYLE_TABLE( ).

        CASE <LS_LINE>-URL.
          WHEN 'A'.

            <LS_LINE>-CURRCODE = ICON_INCOMPLETE.
            HALV->ADD_LINE_STYLE( FIELDNAME = 'CURRCODE'
                                  STYLE     = ZHDCL_HALV_GUI_GRID=>MC_STYLE_BUTTON ).
            HALV->ADD_LINE_COLOR( FIELDNAME = 'CARRID' COL = 6 ).

          WHEN OTHERS.
            HALV->ADD_LINE_COLOR( FIELDNAME = 'CARRID' COL = 3 ).
        ENDCASE.

        HALV->SET_STYLE_FOR_SINGLE_LINE( ET_GOOD_CELLS[ 1 ]-ROW_ID ).
        HALV->SET_COLOR_FOR_SINGLE_LINE( ET_GOOD_CELLS[ 1 ]-ROW_ID ).

      ENDIF.

    ENDIF.

    FIELD-SYMBOLS <ITAB> TYPE LCL_PROG=>TT_SFLIGHT.
    ASSIGN LCL_PROG=>GT_SFLIGHT TO <ITAB>.

    LOOP AT <LT_TAB> INTO DATA(LS_SCARR).

      LOOP AT <ITAB> ASSIGNING FIELD-SYMBOL(<LS_ITAB>) WHERE CARRID = LS_SCARR-CARRID.

        <LS_ITAB>-ZBOX = LS_SCARR-ZBOX.

      ENDLOOP.

    ENDLOOP.

    HALV->REFRESH( ).
    LCL_PROG=>GO_SFLIGHT->REFRESH( ).

  ENDMETHOD.

  METHOD ON_HOTSPOT_CLICK.

    IF E_COLUMN_ID-FIELDNAME = 'CARRID'.
      DATA(LT_CELLS) = HALV->GET_SELECTED_CELLS( ).
      CHECK LT_CELLS IS NOT INITIAL.
      DATA(LV_CARRID) = LT_CELLS[ 1 ]-VALUE.

      SELECT *
        FROM SBOOK
       INTO TABLE @DATA(LT_SBOOK)
      WHERE CARRID = @LV_CARRID.

      IF SY-SUBRC = 0.

        ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV'
                                               BIND_ITAB = ABAP_TRUE
                                               TITLE = TEXT-F05 )
                         )->BIND( CHANGING ITAB = LT_SBOOK )->DISPLAY( ).
      ELSE.

        MESSAGE TEXT-E01 TYPE 'E'.

      ENDIF.

    ENDIF.

  ENDMETHOD.

  METHOD ON_DOUBLE_CLICK.

    FIELD-SYMBOLS <LT_TAB> TYPE STANDARD TABLE.
    ASSIGN HALV->GRID->OUTTAB->* TO <LT_TAB>.

    IF <LT_TAB> IS ASSIGNED.

      FIELD-SYMBOLS <LS_LINE> TYPE LCL_PROG=>TS_SCARR.
      READ TABLE <LT_TAB> ASSIGNING <LS_LINE> INDEX E_ROW-INDEX.

      SELECT *
        FROM SFLIGHT
       INTO TABLE @DATA(LT_SFLIGHT)
      WHERE CARRID = @<LS_LINE>-CARRID.

      IF SY-SUBRC = 0.

        ZHDCL_HALV_FACTORY=>GET_HALV( VALUE #( TYPE = 'HALV_POPUP'
                                               BIND_ITAB = ABAP_TRUE
                                               TITLE = TEXT-F06 )
                         )->BIND( CHANGING ITAB = LT_SFLIGHT )->DISPLAY( ).
      ELSE.

        MESSAGE TEXT-E01 TYPE 'E'.

      ENDIF.

    ENDIF.

  ENDMETHOD.

ENDCLASS.

CLASS LCL_HALV_EVENT_SFLIGHT IMPLEMENTATION.

  METHOD ON_RETRIEVE.

*    FIELD-SYMBOLS <LT_TAB> TYPE LCL_PROG=>TT_SFLIGHT.
*    ASSIGN HALV->GRID->OUTTAB->* TO <LT_TAB>.
*
*    CHECK <LT_TAB> IS ASSIGNED.
*
*    DATA: LT_MASTER TYPE LCL_PROG=>TT_SCARR.
*
*    MOVE-CORRESPONDING LCL_PROG=>GT_MASTER TO LT_MASTER.
*    DELETE LT_MASTER WHERE ZBOX <> ABAP_TRUE.
*
*    LOOP AT <LT_TAB> ASSIGNING FIELD-SYMBOL(<LT_TAB_ROW>).
*      <LT_TAB_ROW>-ZBOX = ABAP_FALSE.
*    ENDLOOP.
*
*    LOOP AT LT_MASTER ASSIGNING FIELD-SYMBOL(<LT_MASTER_ROW>).
*      LOOP AT <LT_TAB> ASSIGNING FIELD-SYMBOL(<LT_TAB_ROW2>) WHERE CARRID = <LT_MASTER_ROW>-CARRID.
*        <LT_TAB_ROW2>-ZBOX = ABAP_TRUE.
*      ENDLOOP.
*    ENDLOOP.
*
*    HALV->REFRESH( ).

*
*    DATA(GO_ITEMS) = LCL_PROG=>GO_SFLIGHT->GET_OUTTAB( ).
*    FIELD-SYMBOLS <GO_ITEMS> TYPE STANDARD TABLE.
*    ASSIGN GO_ITEMS->* TO <GO_ITEMS>.
*
*    LOOP AT  ASSIGNING FIELD-SYMBOL(<TABLE_HEAD>).
*
*      ASSIGN COMPONENT 'ZBOX'   OF STRUCTURE <TABLE_HEAD> TO FIELD-SYMBOL(<BOX>).
*      CHECK SY-SUBRC = 0.
*      ASSIGN COMPONENT 'CARRID' OF STRUCTURE <TABLE_HEAD> TO FIELD-SYMBOL(<CARRID>).
*      CHECK SY-SUBRC = 0.
*
*      DATA(WHERE) = 'CARRID = ''' &&  <CARRID> && ''''."&& ' AND CONNID = ''' &&  <CONNID> && ''''.
*
*      LOOP AT <GO_ITEMS> ASSIGNING FIELD-SYMBOL(<GO_ITEM>) WHERE (WHERE).
*        ASSIGN COMPONENT 'ZBOX'   OF STRUCTURE <GO_ITEM> TO FIELD-SYMBOL(<ITEM_BOX>).
*        CHECK SY-SUBRC = 0.
*        <ITEM_BOX> = <BOX>.
*      ENDLOOP.
*
*    ENDLOOP.
*
*    LCL_PROG=>GO_SFLIGHT->REFRESH( ).

  ENDMETHOD.

  METHOD ON_CHANGED_FINISHED.
    HALV->REFRESH( ).
  ENDMETHOD.

ENDCLASS.

*&---------------------------------------------------------------------*
*& MODULE STATUS_9000 OUTPUT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
MODULE STATUS_9000 OUTPUT.

  CALL FUNCTION 'ZHDFM_HALV_MULT_DISPLAY'.
  SET PF-STATUS '9000'.
  SET TITLEBAR SY-DYNNR WITH TEXT-001.

ENDMODULE.

*&---------------------------------------------------------------------*
*&      MODULE  ON_EXIT_9010  INPUT
*&---------------------------------------------------------------------*
*       TEXT
*----------------------------------------------------------------------*
MODULE ON_EXIT_9000 INPUT.
  CASE SY-UCOMM.
    WHEN '&ZBACK' OR '&ZEND'.
      LEAVE TO SCREEN 0.
    WHEN '&ZEXIT'.
      LEAVE PROGRAM.
    WHEN OTHERS.
  ENDCASE.
ENDMODULE.
