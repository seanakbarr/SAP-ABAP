*&---------------------------------------------------------------------*
*& Report Z44655_W2D5_EXAM_ANSWER
*&---------------------------------------------------------------------*
*& ALV Events
*&---------------------------------------------------------------------*
REPORT Z44655_W3D2_01.

TABLES: EKKO,
        EKPO.

PARAMETERS: P_WERKS TYPE EKPO-WERKS OBLIGATORY.
SELECT-OPTIONS: S_EKORG FOR EKKO-EKORG DEFAULT '1710',
                S_EBELN FOR EKKO-EBELN,
                S_MATNR FOR EKPO-MATNR.

TYPES: BEGIN OF TS_PO,
         BOX        TYPE C LENGTH 1,                           " Step 1: Define column for checkbox "
         ZICON      TYPE ICON-ID,                              " Step 1: Define column for icon "
         CELL_COLOR TYPE LVC_T_SCOL,                           " Step 1: To give a colour to colum "
         CELL_STYLE TYPE LVC_T_STYL,                           " Step 1: To give an access to edit only one data in a column "
         EBELN      TYPE EKKO-EBELN,
         EBELP      TYPE EKPO-EBELP,
         EKORG      TYPE EKKO-EKORG,
         LIFNR      TYPE EKKO-LIFNR,
         NAME1      TYPE LFA1-NAME1,
         WERKS      TYPE EKPO-WERKS,
         MATNR      TYPE EKPO-MATNR,
         MAKTX      TYPE MAKT-MAKTX,
         MENGE      TYPE EKPO-MENGE,
         MEINS      TYPE EKPO-MEINS,
         NETWR      TYPE EKPO-NETWR,
         WAERS      TYPE EKKO-WAERS,
         BPMNG      TYPE EKBE-BPMNG,
         WRBTR      TYPE EKBE-WRBTR,
       END OF TS_PO.

TYPES: TT_PO TYPE STANDARD TABLE OF TS_PO.

DATA:GT_PO TYPE TT_PO.

INITIALIZATION.

  PERFORM FRM_SET_DEFAULT_VALUE.

AT SELECTION-SCREEN.

  PERFORM FRM_CHECK_EXISTENCE USING P_WERKS.

START-OF-SELECTION.

  PERFORM FRM_GET_DATA CHANGING GT_PO.

  PERFORM FRM_SHOW_ALV.

*&---------------------------------------------------------------------*
*& Form FRM_SET_DEFAULT_VALUE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM FRM_SET_DEFAULT_VALUE .

  DATA LS_MATNR LIKE LINE OF S_MATNR.
  LS_MATNR-SIGN   = 'I'.
  LS_MATNR-OPTION = 'EQ'.
  LS_MATNR-LOW    = '1710'.
  LS_MATNR-HIGH   = ''.
  APPEND LS_MATNR TO S_MATNR.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FRM_CHECK_EXISTENCE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> P_WERKS
*&---------------------------------------------------------------------*
FORM FRM_CHECK_EXISTENCE  USING    PV_WERKS.

  DATA LV_WERKS TYPE EKPO-WERKS.
  SELECT SINGLE WERKS
    FROM T001W
    INTO LV_WERKS
   WHERE WERKS = PV_WERKS.
  IF SY-SUBRC <> 0.
    MESSAGE 'Plant not found!' TYPE 'E'.
  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FRM_GET_DATA
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM FRM_GET_DATA CHANGING CT_PO TYPE TT_PO.

  SELECT *
    FROM EKKO
   INNER JOIN EKPO
      ON EKKO~EBELN = EKPO~EBELN
    INTO CORRESPONDING FIELDS OF TABLE CT_PO
   WHERE EKPO~WERKS = P_WERKS
     AND EKKO~EKORG IN S_EKORG
     AND EKKO~EBELN IN S_EBELN
     AND EKPO~MATNR IN S_MATNR.
  IF SY-SUBRC <> 0.
    MESSAGE 'No data found!' TYPE 'E'.
  ENDIF.

  DATA LT_LFA1 TYPE STANDARD TABLE OF LFA1.
  SELECT *
    FROM LFA1
    INTO CORRESPONDING FIELDS OF TABLE LT_LFA1
     FOR ALL ENTRIES IN CT_PO
   WHERE LFA1~LIFNR = CT_PO-LIFNR.
  IF SY-SUBRC = 0.
    SORT LT_LFA1.
  ENDIF.

  DATA LT_MAKT TYPE STANDARD TABLE OF MAKT.
  SELECT *
    FROM MAKT
    INTO CORRESPONDING FIELDS OF TABLE LT_MAKT
     FOR ALL ENTRIES IN CT_PO
   WHERE MAKT~MATNR = CT_PO-MATNR
     AND MAKT~SPRAS = SY-LANGU.
  IF SY-SUBRC = 0.
    SORT LT_MAKT.
  ENDIF.

  DATA LT_EKBE TYPE STANDARD TABLE OF EKBE.
  SELECT *
    FROM EKBE
    INTO CORRESPONDING FIELDS OF TABLE LT_EKBE
     FOR ALL ENTRIES IN CT_PO
   WHERE EKBE~EBELN = CT_PO-EBELN.
  IF SY-SUBRC = 0.
    SORT LT_EKBE.
  ENDIF.

  DATA LS_PO TYPE TS_PO.
  DATA LS_LFA1 LIKE LINE OF LT_LFA1.
  DATA LS_MAKT LIKE LINE OF LT_MAKT.
  DATA LS_EKBE LIKE LINE OF LT_EKBE.
  DATA LS_CELL_COLOR TYPE LVC_S_SCOL.         " Step 3: Define a Local Structure from lvc_s_col to edit the colour of the column "
  DATA LS_CELL_STYLE TYPE LVC_S_STYL.         " Step 3: Define a Local Structure from lvc_s_col to edit only one data of the column "
  LOOP AT CT_PO INTO LS_PO.

    DATA(LV_TABIX) = SY-TABIX.                " Step 4: Define sy-tabix to know the index "

    READ TABLE LT_LFA1 INTO LS_LFA1 WITH KEY LIFNR = LS_PO-LIFNR
                                    BINARY SEARCH.
    IF SY-SUBRC = 0.
      LS_PO-NAME1 = LS_LFA1-NAME1.
      CLEAR LS_LFA1.
    ENDIF.

    READ TABLE LT_MAKT INTO LS_MAKT WITH KEY MATNR = LS_PO-MATNR
                                BINARY SEARCH.
    IF SY-SUBRC = 0.
      LS_PO-MAKTX = LS_MAKT-MAKTX.
      CLEAR LS_MAKT.
    ENDIF.

    READ TABLE LT_EKBE INTO LS_EKBE WITH KEY EBELN = LS_PO-EBELN
                                BINARY SEARCH.
    IF SY-SUBRC = 0.
      LS_PO-EBELN = LS_EKBE-EBELN.
      CLEAR LS_EKBE.
    ENDIF.

    LOOP AT LT_EKBE INTO LS_EKBE WHERE EBELN = LS_PO-EBELN
                                   AND EBELP = LS_PO-EBELP.

      IF LS_EKBE-SHKZG = 'S'.
        LS_PO-BPMNG += LS_EKBE-BPMNG.
        LS_PO-WRBTR += LS_EKBE-WRBTR.
      ELSE.
        LS_PO-BPMNG -= LS_EKBE-BPMNG.
        LS_PO-WRBTR -= LS_EKBE-WRBTR.
      ENDIF.
      CLEAR LS_EKBE.

    ENDLOOP.

    LS_PO-ZICON = '@1C@'.

    " Step 5 "
    " LVC SCOL "
    IF LV_TABIX = 2.                      " To define the index that we want to use
      " LVC Scol "
      CLEAR: LS_CELL_COLOR.
      LS_CELL_COLOR-FNAME = 'LIFNR'.
      LS_CELL_COLOR-COLOR-COL = '1'.      " color code 1-7, if outside rage defaults to 7
      LS_CELL_COLOR-COLOR-INT = '1'.      " 1 = Intensifide on, 0 = Intensified off
      LS_CELL_COLOR-COLOR-INV = '0'.      " 1 - text colour, 0 = background colour

      APPEND LS_CELL_COLOR TO LS_PO-CELL_COLOR.

      CLEAR: LS_CELL_COLOR.
      LS_CELL_COLOR-FNAME = 'MENGE'.
      LS_CELL_COLOR-COLOR-COL = '7'.      " color code 1-7
      LS_CELL_COLOR-COLOR-INT = '1'.      " 1 = Intensifide on, 0 = Intensified off
      LS_CELL_COLOR-COLOR-INV = '0'.      " 1 - text colour, 0 = background colour

      APPEND LS_CELL_COLOR TO LS_PO-CELL_COLOR.

      CLEAR: LS_CELL_COLOR.
      LS_CELL_COLOR-FNAME = 'MATNR'.
      LS_CELL_COLOR-COLOR-COL = '3'.      " color code 1-7 (Default 2)
      LS_CELL_COLOR-COLOR-INT = '1'.      " 1 = Intensifide on, 0 = Intensified off
      LS_CELL_COLOR-COLOR-INV = '0'.      " 1 - text colour, 0 = background colour

      APPEND LS_CELL_COLOR TO LS_PO-CELL_COLOR.

      CLEAR: LS_CELL_COLOR.
      LS_CELL_COLOR-FNAME = 'MAKTX'.
      LS_CELL_COLOR-COLOR-COL = '6'.      " color code 1-7 (Default 2)
      LS_CELL_COLOR-COLOR-INT = '1'.      " 1 = Intensifide on, 0 = Intensified off
      LS_CELL_COLOR-COLOR-INV = '0'.      " 1 - text colour, 0 = background colour

      APPEND LS_CELL_COLOR TO LS_PO-CELL_COLOR.

      " LVC Style "
      CLEAR: LS_CELL_STYLE.
      LS_CELL_STYLE-FIELDNAME = 'MEINS'.
      LS_CELL_STYLE-STYLE = CL_GUI_ALV_GRID=>MC_STYLE_ENABLED.

      APPEND LS_CELL_STYLE TO LS_PO-CELL_STYLE.
    ENDIF.

    MODIFY CT_PO FROM LS_PO.

  ENDLOOP.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form frm_show_alv
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM FRM_SHOW_ALV .

  DATA: LT_FCAT TYPE LVC_T_FCAT.

  APPEND VALUE #( FIELDNAME = 'BOX  ' COLTEXT = 'Box.' CHECKBOX = ABAP_TRUE      EDIT = ABAP_TRUE )     TO LT_FCAT. " 'checbox = abap_true' is to make a checbox in every row of 'box' column
  APPEND VALUE #( FIELDNAME = 'ZICON ' COLTEXT = 'ICON.' ICON = ABAP_TRUE )                             TO LT_FCAT. " 'checbox = abap_true' is to make a checbox in every row of 'box' column
  APPEND VALUE #( FIELDNAME = 'EBELN' COLTEXT = 'Purch.Doc.' REF_TABLE = 'EKKO'   REF_FIELD = 'EBELN' ) TO LT_FCAT. " 'ref_table' and 'ref_field' is to give a reference and give a reaction for the column data
  APPEND VALUE #( FIELDNAME = 'EBELP' COLTEXT = 'Item' )                                                TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'EKORG' COLTEXT = 'Item	Purchasing org.' )                                TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'LIFNR' COLTEXT = 'Vendor' )                                              TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'NAME1' COLTEXT = 'Vendor Name' )                                         TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'WERKS' COLTEXT = 'Plant' )                                               TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'MATNR' COLTEXT = 'Material Number' )                                     TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'MAKTX' COLTEXT = 'Material description' )                                TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'MENGE' COLTEXT = 'Quantity' )                                            TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'MEINS' COLTEXT = 'Order Unit' )                                          TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'NETWR' COLTEXT = 'Net Order Value' )                                     TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'WAERS' COLTEXT = 'Currency' EDIT = ABAP_TRUE )                           TO LT_FCAT.  " 'edit = abap_true' is an alternative way to use lvc_s_layo for edit"
  APPEND VALUE #( FIELDNAME = 'BPMNG' COLTEXT = 'Received Qty.' )                                       TO LT_FCAT.
  APPEND VALUE #( FIELDNAME = 'WRBTR' COLTEXT = 'Amount' )                                              TO LT_FCAT.

  " Step 2 "
  DATA LS_LAYOUT TYPE LVC_S_LAYO.
  LS_LAYOUT-CWIDTH_OPT = 'X'.                   " To automatic adjust the report layout (We can use 'X' or 'ABAP_TRUE' keyword, it's still the same) "
*  ls_layout-edit = 'X'.                        " To edit every data when running (We can use 'X' or 'ABAP_TRUE' keyword, it's still the same) "
  LS_LAYOUT-ZEBRA = 'X'.                        " To make every row have a light and dark tone (We can use 'X' or 'ABAP_TRUE' keyword, it's still the same) "
  LS_LAYOUT-CTAB_FNAME = 'CELL_COLOR'.          " To define an access to fill the colour of the column
  LS_LAYOUT-STYLEFNAME = 'CELL_STYLE'.          " To define an acesss to edit only one data in a column


  " Define a variable to give an event at ALV
  DATA LT_EVENTS TYPE SLIS_T_EVENT.
  DATA LS_EVENTS LIKE LINE OF LT_EVENTS.

  LS_EVENTS-NAME = SLIS_EV_PF_STATUS_SET.
  LS_EVENTS-FORM = 'FRM_SET_PF_STATUS'.

  APPEND LS_EVENTS TO LT_EVENTS.

  LS_EVENTS-NAME = SLIS_EV_USER_COMMAND.
  LS_EVENTS-FORM = 'FRM_USER_COMMAND'.

  APPEND LS_EVENTS TO LT_EVENTS.

  LS_EVENTS-NAME = SLIS_EV_DATA_CHANGED.
  LS_EVENTS-FORM ='FRM_DATA_CHANGED'.

  APPEND LS_EVENTS TO LT_EVENTS.

  CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY_LVC'
    EXPORTING
      I_CALLBACK_PROGRAM = SY-REPID                                       " System report ID
      I_GRID_TITLE       = 'The Assessment of Week 2-ALV Report-Author: 44655 + Sean'
      IS_LAYOUT_LVC      = LS_LAYOUT
      IT_FIELDCAT_LVC    = LT_FCAT
      I_DEFAULT          = 'X'                     "
      I_SAVE             = 'A'                   " To save the variant display of ALV that we change "
      IT_EVENTS          = LT_EVENTS
    TABLES
      T_OUTTAB           = GT_PO
    EXCEPTIONS
      PROGRAM_ERROR      = 1
      OTHERS             = 2.

  IF SY-SUBRC <> 0.
    MESSAGE ID SY-MSGID
    TYPE       SY-MSGTY
    NUMBER     SY-MSGNO.
  ENDIF.

ENDFORM.

FORM FRM_SET_PF_STATUS USING PV_EXCL_TAB TYPE KKBLO_T_EXTAB.
  SET TITLEBAR 'TITLE' WITH 'TEST' 'TITLE' 'IS' 'SUCCESS'.
  SET PF-STATUS 'STANDARD_FULLSCREEN'.

  DATA LO_GRID TYPE REF TO CL_GUI_ALV_GRID.
  CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
    IMPORTING
      E_GRID = LO_GRID.

  LO_GRID->SET_READY_FOR_INPUT( 1 ).
  LO_GRID->REGISTER_EDIT_EVENT( LO_GRID->MC_EVT_MODIFIED ).

ENDFORM.

FORM FRM_USER_COMMAND USING PV_UCOMM       LIKE SY-UCOMM
                            PS_FIELD_INFO  TYPE SLIS_SELFIELD.

  CASE PV_UCOMM.
    WHEN 'ZPOPUP'.
      MESSAGE 'Attachment' TYPE 'I'.
    WHEN '&IC1'.
*      CL_DEMO_OUTPUT=>DISPLAY( PS_FIELD_INFO ).
      SET PARAMETER ID 'BES' FIELD PS_FIELD_INFO-VALUE.
      CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
    WHEN OTHERS.
    ENDCASE.
ENDFORM.

FORM FRM_DATA_CHANGED USING PR_DATA_CHANGED TYPE REF TO CL_ALV_CHANGED_DATA_PROTOCOL.

*  BREAK-POINT.
  DATA LS_MOD_CELLS LIKE LINE OF PR_DATA_CHANGED->MT_MOD_CELLS.

  READ TABLE PR_DATA_CHANGED->MT_MOD_CELLS INTO LS_MOD_CELLS INDEX 1.

  IF SY-SUBRC = 0 AND LS_MOD_CELLS-FIELDNAME = 'WAERS'.
    DATA LS_PO LIKE LINE OF GT_PO.
    DATA LS_CELL_COLOR TYPE LVC_S_SCOL.
    READ TABLE GT_PO INDEX LS_MOD_CELLS-ROW_ID INTO LS_PO.

    IF LS_MOD_CELLS-VALUE = 'IDR'.
      LS_PO-NETWR *= 15000.
      LS_CELL_COLOR-FNAME = ''.
      LS_CELL_COLOR-COLOR-COL = '5'.      " color code 1-7, if outside rage defaults to 7
      LS_CELL_COLOR-COLOR-INT = '1'.      " 1 = Intensifide on, 0 = Intensified off
      LS_CELL_COLOR-COLOR-INV = '0'.      " 1 - text colour, 0 = background colour

      LS_PO-ZICON = '@01@'.
    ENDIF.

    APPEND LS_CELL_COLOR TO LS_PO-CELL_COLOR.

    MODIFY GT_PO FROM LS_PO INDEX LS_MOD_CELLS-ROW_ID.

    DATA LO_GRID TYPE REF TO CL_GUI_ALV_GRID.
    CALL FUNCTION 'GET_GLOBALS_FROM_SLVC_FULLSCR'
      IMPORTING
        E_GRID = LO_GRID.
    LO_GRID->REFRESH_TABLE_DISPLAY( ).

  ENDIF.
ENDFORM.
